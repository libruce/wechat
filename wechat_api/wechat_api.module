<?php
//默认工作模式。公众平台
define('WEIXIN_USE_DEFAULT', 1);
//开放平台工作模式
define('WEIXIN_USE_OPEN', 2);

use Drupal\wechat_api\Wechat;
use Drupal\wechat_api\ErrCode;

/**
 * Implements hook_permission().
 */
function wechat_api_permission() {
  return array(
    'administer wechat configuration' => array(
      'title' => t('微信接入设置'),
      'description' => t('允许修改微信接入信息.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function wechat_api_menu() {
  $items['admin/config/wechat'] = array(
    'title' => '微信',
    'description' => '微信相关设置.',
    'position' => 'left',
    'weight' => 0,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/wechat/api'] = array(
    'title' => '微信API设置',
    'description' => '设置Token、Appid、Appsecret.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_api_settings_form'),
    'access arguments' => array('administer wechat configuration'),
  );

  $items['admin/config/wechat/api/use'] = array(
    'title' => '微信使用配置',
    'description' => '设置使用方式.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_api_use_settings_form'),
    'access arguments' => array('administer wechat configuration'),
  );
  $items['wechat'] = array(
    'title' => 'wechat',
    'description' => 'wechat callback',
    'page callback' => 'wechat_api_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['wechat/%'] = array(
    'title' => 'wechat',
    'description' => 'wechat callback',
    'page callback' => 'wechat_api_callback',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/wechat/apinew'] = array(
    'title' => '微信API设置new',
    'description' => '设置Token、Appid、Appsecret.',
    'page callback' => 'wechat_api_admin_overview',
    'access arguments' => array('administer wechat configuration'),
    'file' => 'wechat_api.admin.inc',
  );

  $items['admin/config/wechat/apinew/edit/%wechat_api'] = array(
    'title' => '微信API设置修改',
    'page callback' => 'wechat_api_admin_edit',
    'page arguments' => array(5),
    'access arguments' => array('administer wechat configuration'),
    'file' => 'wechat_api.admin.inc',
  );
  $items['admin/config/wechat/apinew/delete/%wechat_api'] = array(
    'title' => 'Delete alias',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wechat_api_admin_delete_confirm', 5),
    'access arguments' => array('administer wechat configuration'),
    'file' => 'wechat_api.admin.inc',
  );
  $items['admin/config/wechat/apinew/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/wechat/apinew/add'] = array(
    'title' => '添加微信API设置',
    'page callback' => 'wechat_api_admin_edit',
    'access arguments' => array('administer url aliases'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'wechat_api.admin.inc',
  );
  return $items;
}


function wechat_api_use_settings_form($form, &$form_state) {
  $form['required'] = array(
    '#type' => 'fieldset',
    '#title' => t('微信使用配置'),
  );

  $form['required']['wechat_api_use'] = array(
    '#type' => 'radios',
    '#title' => t('运行模式'),
    '#default_value' => variable_get('wechat_api_use', WEIXIN_USE_DEFAULT),
    '#options' => array(
      '1' => '公众平台',
      '2' => '开放平台',
    ),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

function wechat_api_settings_form($form, &$form_state) {
  global $base_url;
  $form['required'] = array(
    '#type' => 'fieldset',
    '#title' => t('Wechat app info'),
    '#description' => t("当前服务器微信接入地址：<b>%base_url</b>", array('%base_url' => $base_url . '/wechat')),
  );

  $form['required']['wechat_api_appid'] = array(
    '#type' => 'textfield',
    '#title' => t('Appid'),
    '#default_value' => variable_get('wechat_api_appid', ''),
    '#required' => TRUE,
  );
  $form['required']['wechat_api_appsecret'] = array(
    '#type' => 'textfield',
    '#title' => t('Appsecret'),
    '#default_value' => variable_get('wechat_api_appsecret', ''),
    '#required' => TRUE,
  );


  $form['required']['wechat_api_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Token'),
    '#default_value' => variable_get('wechat_api_token', ''),
    '#required' => TRUE,
  );
  $form['required']['wechat_api_encodingaeskey'] = array(
    '#type' => 'textfield',
    '#title' => t('EncodingAESKey'),
    '#default_value' => variable_get('wechat_api_encodingaeskey', ''),
    '#required' => TRUE,
  );

  $form['required']['wechat_api_debug'] = array(
    '#type' => 'checkbox',
    '#title' => t('Debug（测试时使用，选中时不验证消息签名）'),
    '#default_value' => variable_get('wechat_api_debug', FALSE),
  );
  $form['#submit'][] = 'wechat_api_access_token_refresh';
  return system_settings_form($form);
}

function wechat_api_access_token_refresh($form, &$form_state) {
  $token = $form_state['input']['wechat_api_token'];
  $appid = $form_state['input']['wechat_api_appid'];
  $appsecret = $form_state['input']['wechat_api_appsecret'];
  $options = array(
    'token' => $token,
    'appid' => $appid,
    'appsecret' => $appsecret,
  );
  $wechat = new Wechat($options);
  $access_token = $wechat->checkAuth();
  if (!$access_token) {
    drupal_set_message('参数错误！请检查相关设置。', 'error');
  }
  variable_set("wechat_api_access_token", $access_token);
  variable_set("wechat_api_access_token_time", time());
}


function wechat_api_init_wechatobj($wechat_options = array(), $wechat_token_array = array()) {
  // $wechat = &drupal_static(__FUNCTION__);
  // if (!isset($wechat)) {
    $options = array(
      'token' => variable_get('wechat_api_token', ""),
      'appid' => variable_get('wechat_api_appid', ""),
      'appsecret' => variable_get('wechat_api_appsecret', ""),
      'encodingaeskey' => variable_get('wechat_api_encodingaeskey', ''),
    );
    if(!empty($wechat_options)){
      $options = $wechat_options;
    }
    watchdog('wechat_1', json_encode($options));
    $wechat = new Wechat($options);
    watchdog('wechat_2', json_encode($wechat));
    // if(!empty($wechat_token_array)){
    //   $access_token = $wechat_token_array['access_token'];
    //   $access_token_time = $wechat_token_array['access_token_time'];
    // }
    // else{
    //   $access_token = variable_get("wechat_api_access_token", '');
    //   $access_token_time = variable_get("wechat_api_access_token_time", 0);
    // }
    //
    // if ($access_token_time > time() - 7000 && $access_token != '') {
    //   watchdog('wechat_3', json_encode($access_token));
    //   $wechat->checkAuth('', '', $access_token);
    //   $return = $wechat->getServerIp();
    //   watchdog('wechat_3', json_encode($return));
    //   if (!$return) {
    //     $access_token = $wechat->checkAuth();
    //     if(!empty($wechat_token_array) && isset($wechat_token_array['wechat_id'])){
    //       $wechat_token_array['access_token_time'] = time();
    //       $wechat_token_array['access_token'] = $access_token;
    //       wechat_api_save($wechat_token_array);
    //     }
    //     else {
    //       variable_set("wechat_api_access_token", $access_token);
    //       variable_set("wechat_api_access_token_time", time());
    //     }
    //   }
    // }
    // else {
      watchdog('wechat_4', '4');
      $access_token = $wechat->checkAuth();
      watchdog('wechat_4', json_encode($access_token));
      if(!empty($wechat_token_array) && isset($wechat_token_array['wechat_id'])){
        $wechat_token_array['access_token_time'] = time();
        $wechat_token_array['access_token'] = $access_token;
        wechat_api_save($wechat_token_array);
      }
      else {
        variable_set("wechat_api_access_token", $access_token);
        variable_set("wechat_api_access_token_time", time());
      }
    // }
  // }
  return $wechat;
}

/**
 * 微信接口回调函数，提供验证是否接入成功。在wechat_session模块中使用hook_menu_alter()覆写提供更强大的功能。
 */
function wechat_api_callback($wechat_index = FALSE) {
  $wechat_options = array();
  $wechat_access_array = array();
  if($wechat_index)
  {
    //Get related wechat options from DB
    $wechat_api = wechat_api_load($wechat_index);
    if($wechat_api){
      $wechat_options = array(
        'token' => $wechat_api['app_token'],
        'appid' => $wechat_api['app_id'],
        'appsecret' => $wechat_api['app_secret'],
        'encodingaeskey' => $wechat_api['encodingaeskey'],
      );
      $wechat_access_array = array(
        'wechat_id' => $wechat_api['wechat_id'],
        'access_token' => $wechat_api['access_token'],
        'access_token_time' => $wechat_api['access_token_time']
      );
    }
  }
  $wechat_obj = wechat_api_init_wechatobj($wechat_options, $wechat_access_array);
  watchdog('wechat_api_callback1', '1');
  $wechat_obj->valid(variable_get('wechat_api_debug', FALSE)); //TODO
  $wechat_obj->getRev();
  watchdog('wechat_api_callback1', '2');
  $xml_obj = $wechat_obj->getRevData();
  $xml_obj = (object) $xml_obj;
  $to_user_name = $wechat_obj->getRevFrom();
  $from_user_name = $wechat_obj->getRevTo();
  $request_time = time();
  $content = format_date(time(), 'short') . '
  api配置成功
  ';
  if (isset($xml_obj->MsgType) && $xml_obj->MsgType == 'text') {
    $content .= $wechat_obj->getRevContent();
  }
  else {
    $content .= 'api配置成功。';
  }
  watchdog('wechat_api_callback2', $content);
  $return_template = "<xml>
      <ToUserName><![CDATA[%s]]></ToUserName>
      <FromUserName><![CDATA[%s]]></FromUserName>
      <CreateTime>%s</CreateTime>
      <MsgType><![CDATA[text]]></MsgType>
      <Content><![CDATA[%s]]></Content>
      <FuncFlag>0</FuncFlag>
    </xml>";

  $result_str = sprintf($return_template, $to_user_name, $from_user_name, $request_time, $content);

  watchdog('wechat_api_callback3', $result_str);
  echo $result_str;
}



/**
 * Fetches a specific URL alias from the database.
 *
 * @param $conditions
 *   A string representing the source, a number representing the pid, or an
 *   array of query conditions.
 */
function wechat_api_load($conditions) {
  if (is_numeric($conditions)) {
    $conditions = array('wechat_id' => $conditions);
  }
  elseif (!is_array($conditions)) {
    return FALSE;
  }
  $select = db_select('wechat_account');
  foreach ($conditions as $field => $value) {
    $select->condition($field, $value);
  }
  return $select
    ->fields('wechat_account')
    ->execute()
    ->fetchAssoc();
}

/**
 * Save a wechat api account to the database.
 */
function wechat_api_save(&$wechat_api) {

  // Load the stored alias, if any.
  if (!empty($wechat_api['wechat_id']) && !isset($wechat_api['original'])) {
    $wechat_api['original'] = wechat_api_load($wechat_api['wechat_id']);
  }

  if (empty($wechat_api['wechat_id'])) {
    drupal_write_record('wechat_account', $wechat_api);
  }
  else {
    drupal_write_record('wechat_account', $wechat_api, array('wechat_id'));
  }

  // Clear internal properties.
  unset($wechat_api['original']);
}


/**
 * Delete a URL alias.
 *
 * @param $criteria
 *   A number representing the pid or an array of criteria.
 */
function wechat_api_delete($criteria) {
  if (!is_array($criteria)) {
    $criteria = array('wechat_id' => $criteria);
  }
  $wechat_api = wechat_api_load($criteria);
  $query = db_delete('wechat_account');
  foreach ($criteria as $field => $value) {
    $query->condition($field, $value);
  }
  $query->execute();
}
