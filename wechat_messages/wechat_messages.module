<?php
/**
 * Is test mode
 */
define('TEST_MOD', 0);

/**
 * RESPONSE STATUS AND ERROR CODES
 */
define('STATUS_CODE_SUCCESS', '1');

/**
 * Failure code
 */
define('STATUS_CODE_FAILED', '0');

/**
 * Implements hook_help().
 */
function wechat_messages_help($path, $arg) {
  switch ($path) {
    case 'admin/help#wechat_messages':
      $output = '';
      $output .= '<h3>' . t('参数说明') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('接收者') . '</dt>';
      $output .= '<dd>' . t('接收者就是接收消息的用户，用户的openid，在请求的消息中有用户的openid，直接选取即可。wechat-request:from-user-name') . '</dd>';
      $output .= '<dt>' . t('消息类型') . '</dt>';
      $output .= '<dd>' . t('需要回复的消息类型可用类型参看<a href="http://mp.weixin.qq.com/wiki/1/70a29afed17f56d537c833f89be979c9.html#.E5.AE.A2.E6.9C.8D.E6.8E.A5.E5.8F.A3-.E5.8F.91.E6.B6.88.E6.81.AF">微信文档</a>') . '</dd>';
      $output .= '<dt>' . t('消息内容') . '</dt>';
      $output .= '<dd>' . t('消息内容为回复的这个消息的内容，和消息类型有关联，参看<a href="http://mp.weixin.qq.com/wiki/1/70a29afed17f56d537c833f89be979c9.html#.E5.AE.A2.E6.9C.8D.E6.8E.A5.E5.8F.A3-.E5.8F.91.E6.B6.88.E6.81.AF">微信文档</a>。例：<pre>
    {
    "touser":"OPENID",
    "msgtype":"video",
    "video":
        {
          "media_id":"MEDIA_ID",
          "thumb_media_id":"MEDIA_ID",
          "title":"TITLE",
          "description":"DESCRIPTION"
        }
    }
</pre>
则消息内容填写
<pre>
    {
      "media_id":"MEDIA_ID",
      "thumb_media_id":"MEDIA_ID",
      "title":"TITLE",
      "description":"DESCRIPTION"
    }
</pre>
') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_rules_action_info().
 */
function wechat_messages_rules_action_info() {
  $action['wechat_messages_send_message'] = array(
    'parameter' => array(
      'user' => array(
        'type' => 'text',
        'label' => t('接收者'),
        'description' => t('选择或填写接收消息的用户 <a href="/admin/help/wechat_messages"><b>点击查看详细</b></a>.'),
      ),
      'type' => array(
        'type' => 'text',
        'label' => t('消息类型'),
        'description' => t('选择或填写一个消息类型 <a href="/admin/help/wechat_messages"><b>点击查看详细</b></a>.'),
      ),
      'body' => array(
        'type' => 'text',
        'label' => t('消息内容'),
        'description' => t('json格式 <a href="/admin/help/wechat_messages"><b>点击查看详细</b></a>.'),
      )
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('微信发送消息（使用客服接口）'),
    'base' => 'wechat_messages_action_send_message',
  );
  $action['wechat_messages_send_message2'] = array(
    'parameter' => array(
      'message' => array(
        'type' => 'text',
        'label' => t('消息体（json）'),
        'description' => t('json格式.'),
      )
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('微信发送消息（使用客服接口）2，完全构造消息体'),
    'base' => 'wechat_messages_action_send_message2',
  );
  $action['wechat_messages_send_template_message'] = array(
    'parameter' => array(
      'message' => array(
        'type' => 'text',
        'label' => t('消息体（json）'),
        'description' => t('json格式.'),
      )
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('发送模版消息'),
    'base' => 'wechat_messages_send_template_message',
  );
  $action['wechat_messages_change_reply_status'] = array(
    'parameter' => array(
      'openid' => array(
        'type' => 'text',
        'label' => t('OpenId'),
        'description' => t('需要修改的OpenId.'),
      ),
      'status' => array(
        'type' => 'integer',
        'label' => t('状态'),
        'description' => t('需要切换到的状态，0 表示需要回复。1 表示不需要回复'),
      ),
    ),
    'group' => t('微信'),
    'access callback' => user_access('administer permissions'),
    'label' => t('改变微信请求消息回复状态'),
    'base' => 'wechat_messages_action_change_reply_status',
  );
  return $action;
}

function wechat_messages_send_template_message($message) {
  $wechatObj = wechat_api_init_wechatobj();
  $TemplateMessageDate = json_decode($message);
  $TemplateMessageDate = (array) $TemplateMessageDate;
  $r = $wechatObj->sendTemplateMessage($TemplateMessageDate);
  watchdog('wechat_messages_send_template_message', json_encode($r, JSON_UNESCAPED_UNICODE));
}

function wechat_messages_action_send_message2($message) {
  $data = json_decode($message);
  $data = (array) $data;
  $wechatObj = wechat_api_init_wechatobj();
  $r = $wechatObj->sendCustomMessage($data);
  watchdog('wechat_messages_send_message2', json_encode($r, JSON_UNESCAPED_UNICODE));
}

function wechat_messages_action_change_reply_status($openid, $status) {
  $result = db_select('wechat_messages_request_reply_status', 'wmrrs')
    ->fields('wmrrs')
    ->condition('openid', $openid)
    ->execute()
    ->fetchAssoc();

  $fields = array(
    'openid' => (string) $openid,
    'status' => (int) $status,
  );

  if (empty($result)) {
    db_insert('wechat_messages_request_reply_status')
      ->fields($fields)
      ->execute();
  }
  else {
    db_update('wechat_messages_request_reply_status')
      ->fields($fields)
      ->condition('openid', $openid)
      ->execute();
  }
}

function wechat_messages_action_send_message($user, $type, $body) {
  //消息类型修正钩子
  drupal_alter('wechat_messages_type_repair', $type);

  $wechat_obj = wechat_api_init_wechatobj();
  $body = json_decode($body);
  $body = (array) $body;
  $data = array(
    'touser' => $user,
    'msgtype' => $type,
    $type => $body,
  );
  $r = $wechat_obj->sendCustomMessage($data);

  watchdog('wechat_messages_send_message', json_encode($r, JSON_UNESCAPED_UNICODE));
}


/**
 * Implements hook_rules_condition_info().
 */
function wechat_messages_rules_condition_info() {
  $condition['wechat_messages_keyword_search'] = array(
    'label' => t('微信消息关键字查询'),
    'parameter' => array(
      'text' => array(
        'type' => 'text',
        'label' => t('Text'),
        'restriction' => 'selector',
      ),
      'match' => array(
        'type' => 'text',
        'label' => t('Matching text'),
        'description' => t('多个关键字用英文逗号 “,” 隔开。'),
      ),
    ),
    'group' => t('微信'),
    'base' => 'wechat_messages_condition_keyword_search',
  );
  $condition['wechat_messages_request_reply_status'] = array(
    'label' => t('判断此条消息是否需要回复'),
    'parameter' => array(
      'openid' => array(
        'type' => 'text',
        'label' => t('OpenId'),
        'restriction' => 'selector',
      ),
    ),
    'group' => t('微信'),
    'base' => 'wechat_messages_condition_request_reply_status',
  );
  return $condition;
}

function wechat_messages_condition_request_reply_status($openid) {
  $table = 'wechat_messages_request_reply_status';
  $result = db_select($table)
    ->fields($table)
    ->condition('openid', $openid)
    ->execute()
    ->fetchAssoc();
  if (empty($result)) {
    return TRUE;
  }
  if ($result['status']) {
    return FALSE;
  }
  return TRUE;
}

function wechat_messages_condition_keyword_search($text, $match) {
  $array = drupal_explode_tags($match);
  $return = FALSE;
  foreach ($array as $key) {
    $str = stristr($text, $key);
    if (!empty($str)) {
      $return = TRUE;
      break;
    }
  }
  return $return;
}

/**
 * Implements hook_update_N().
 * 添加请求消息回复状态管理
 */
function wechat_messages_update_7100(&$sandbox) {
  $schema['wechat_messages_request_reply_status'] = array(
    // table definition array goes here
    'description' => '微信回应消息管理表.',
    'fields' => array(
      'openid' => array(
        'description' => 'Open Id',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'status' => array(
        'description' => '状态',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('openid'),
  );
  db_create_table('wechat_messages_request_reply_status', $schema['wechat_messages_request_reply_status']);
}


/**
 * 消息发送接口
 */

/**
 * Implements hook_menu().
 */
function wechat_messages_menu() {
  $items['wechat_messages/api/send'] = array(
    'page callback' => 'wechat_messages_api_send',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Callback of wechat message send api.
 */
function wechat_messages_api_send(){
  //--- Sample post data ---//
  // $post_data = (array)json_decode('{
  //   "user_openid":"omPD7vtVtb7W3Gaya00S8YqFL8LU",
  //   "key":"WECHAT_MESSAGE_SEND_API_KEY",
  //   "msgtype": "text",
  //   "content":"测试文字消息内容",
  //   "wechat_api_id": -1,
  // }');

  $post = array();
  if (!empty($_POST)) {
      $post = array_merge($post, $_POST);
  } elseif (TEST_MOD && !empty($_GET)) {
      $post = array_merge($post, $_GET);
  }

  $wechat_api = FALSE;
  //check wechat index is not -1 which refers to the default wechat config
  if(isset($post['wechat_api_id']) && $post['wechat_api_id'] != -1){
    //get corresponding wechat config from DB
    $wechat_api = wechat_api_load($post['wechat_api_id']);
  }

  /**
   * Check access key is right
   */
  if($wechat_api && !TEST_MOD)
  {
    if (!isset($post['key'])) {
      $error = 'argument: key is mandatory';
    }
    else {
      $apikey = isset($wechat_api['api_key']) ? $wechat_api['api_key'] : FALSE;
      if ($post['key'] != $apikey) {
         $error = 'Your access key is wrong';
      }
    }

    if (!empty($error)) {
      $return = array(
        'status'  => STATUS_CODE_FAILED,
        'message' => $error,
        'data'    => null
      );
      drupal_json_output($return);
      exit;
    }
  }



  /**
  * Check arguments
  */

  if(!isset($post['user_openid']) || !isset($post['wechat_uid']) || !isset($post['msgtype'])){
    $error = 'Arguments missing';
    $return = array(
      'status'  => STATUS_CODE_FAILED,
      'message' => $error,
      'data'    => null
    );
    drupal_json_output($return);
    exit;
  }


  $wechat_options = array();
  $wechat_access_array = array();
  //check wechat index is not -1 which refers to the default wechat config
  if($wechat_api){
    $wechat_options = array(
      'token' => $wechat_api['app_token'],
      'appid' => $wechat_api['app_id'],
      'appsecret' => $wechat_api['app_secret'],
      'encodingaeskey' => $wechat_api['encodingaeskey'],
    );
    $wechat_access_array = array(
      'wechat_id' => $wechat_api['wechat_id'],
      'access_token' => $wechat_api['access_token'],
      'access_token_time' => $wechat_api['access_token_time']
    );
  }

  $wechat_obj = wechat_api_init_wechatobj($wechat_options, $wechat_access_array);
  $body = array();

  $touser = $post['user_openid'];
  $wechat_uid = $post['wechat_uid'];
  $type = $post['msgtype'];


  if($type !== 'template')
  {
    //普通消息
    switch ($type) {
      case 'text': {
        $body['content'] = $post['content'];
        break;
      }
      //TODO add other types of messages
    }
    //debug
    drupal_json_output($wechat_obj);

    $data = array(
      'touser' => $touser,
      'msgtype' => $type,
      $type => $body,
    );

    //debug
    drupal_json_output($data);

    $return = $wechat_obj->sendCustomMessage($data);
  }
  else {
    // 模版消息
    $template_id = $post['template_id'];
    $temp_msg_data = json_decode($post['template_data']);
    $data = array(
      'touser' => $touser,
      'template_id' => $template_id,
      'data' => $temp_msg_data,
    );

    $return = $wechat_obj->sendTemplateMessage($data);

  }

  $success = STATUS_CODE_FAILED;
  if ($return['errcode'] == '0' && $return['errmsg'] == 'ok') {
    $success = STATUS_CODE_SUCCESS;
  }

  watchdog('wechat_messages_api_send_message', json_encode($data, JSON_UNESCAPED_UNICODE));
  watchdog('wechat_messages_api_send_result', json_encode($return, JSON_UNESCAPED_UNICODE));


  $result = array(
    'status'  => $success,
    'message' => $return['errmsg'],
    'data'    => $return
  );

  drupal_json_output($result);
  exit();
}
